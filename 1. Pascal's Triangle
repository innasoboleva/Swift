/* Using the Swift language, have the function ChessboardTraveling(str) 
read str which will be a string consisting of the location of a space on a 
standard 8x8 chess board with no pieces on the board along with another space 
on the chess board. The structure of str will be the following: "(x y)(a b)" 
where (x y) represents the position you are currently on with x and y ranging 
from 1 to 8 and (a b) represents some other space on the chess board with a 
and b also ranging from 1 to 8 where a > x and b > y. Your program should 
determine how many ways there are of traveling from (x y) on the board to 
(a b) moving only up and to the right. For example: if str is (1 1)(2 2) then 
your program should output 2 because there are only two possible ways to travel 
from space (1 1) on a chessboard to space (2 2) while making only moves up and to the right. */


func pascalTriangle(_ row: Int, _ column: Int) -> Int {
    if (column == 0 || column == row) {
        return 1
    }
    return pascalTriangle(row - 1, column - 1) + pascalTriangle(row - 1, column)
}

func ChessboardTraveling(_ str: String) -> Int {
    let position = str.components(separatedBy: .punctuationCharacters).filter{!$0.isEmpty}
    let first = position[0].components(separatedBy: .whitespaces).map{Int($0)!}
    let second = position[1].components(separatedBy: .whitespaces).map{Int($0)!}
    var move = [second[0] - first[0], second[1] - first[1]]
    
    return pascalTriangle(move[0] + move[1], move[0])
}
